#version 140

uniform float time;
uniform vec2 resolution;
uniform vec3 position;
uniform vec3 direction;

in vec2 f_texcoord;
out vec4 out_Color;

#define MAX_ITER 160.0
#define EPSILON 0.001
//in raymarching we dont have intersectinos

// function: how close ray is to the object
// function: produce normal from the object found for lighting
// function: distance function for closing in on objects

// simple object distance function

// lets just compare distance of z coordinate... doesnt this match everything lol
#define PII 3.13

/////PRIMITIVES///////////////////////////////////////////////////////
// simple floor to the scene
float sFloor (vec3 pos, float y){
  return abs(y-pos.y);
}

float sBall(vec3 pos, float size) {
  return length(pos)-size;
  // pos 3.0, raypos 1.0, size 1.0, expected something between 1-2 result
}


////HELP FUNCTIONS//////////////////////////////////////////////////
//-----------------------------------------------------------------

float opS( float f1, float f2 )
{
  return (f1<f2) ? f1 : f2;
}

vec2 opU( vec2 d1, vec2 d2 )
{
  return (d1.x<d2.x) ? d1 : d2;
}

float map(vec3 pos) {
  float res = sBall(pos-vec3(0.0,0.0,3.0), 1.5);
  res = opS(res, sBall(pos-vec3(-1.2,0.0,2.5),  1.0));
  res = opS(res, sBall(pos-vec3(0.2,0.2,1.5), 0.4));

  return res;
}

vec3 getNor(vec3 pos)
{
  vec2 e = vec2(EPSILON, 0.0);
  vec3 nor = vec3(
      map(pos+e.xyy) - map(pos-e.xyy),
      map(pos+e.yxy) - map(pos-e.yxy),
      map(pos+e.yyx) - map(pos-e.yyx) );
  return normalize(nor);
}


// this is probably a ball... I hope

//Specify all the objects that exist

vec2 castRay(vec3 rp, vec3 rd)
{
  vec3 ro = rp;
  float dist = 100000.0;
  float i=0.0;
  for (i = 0.0; i<MAX_ITER; i++) {
    dist = map(rp);
    if (dist < EPSILON) break;
    rp = rp+rd*dist;
  }
  return vec2(distance(ro,rp), i);
}

// from object to light usually
vec3 shadowray(vec3 rd, vec3 ro) {
  vec2 coil = castRay(rd, ro);
  vec3 normal = getNor(ro);
  vec3 AOL = vec3(0);

  if (coil.y == MAX_ITER)
  { // Since we didnt coillide with anything, it's fine to assume we can see the light
    float d = abs(dot(rd,normal));
    if (d > 0.0001)
    {
      AOL = pow(d,4.0)+vec3(1.0-sin(time*0.2),1.0-sin(time*2.0),1.0-sin(time))*0.4;
    }
  }
  return AOL;
}

void main( void ) {
  float aspect = resolution.x/resolution.y;
  vec2 uvUnit = 1.0 / resolution.xy;

  vec2 uv = ( gl_FragCoord.xy / resolution.xy );
  vec2 pos = (uv-0.5);
  pos.x *= aspect;
  pos.y -= 0.0;

  vec3 posi = vec3(0.0,0.0,-1.5);
  vec3 dire = normalize(vec3(0.0,0.0,1.0));
  posi = position.xyz;
  dire = normalize(direction-position);
  vec3 c_r = cross(dire, vec3(0.0,1.0,0.0));
  vec3 c_up = cross(c_r, dire);
  vec3 image_point = pos.x * c_r + pos.y*c_up + posi+dire;
  vec3 rd = image_point-posi;
  vec3 ro = posi;
  //rd = normalize(direction);
  vec3 lightPos = vec3(1.0+sin(time*0.2)*2.5,0.0-cos(time*0.2)*2.5,0.0);
  vec2 res = castRay(ro, rd);
  if (res.y < MAX_ITER) {
    vec3 point = ro+rd*res.x;
    vec3 ln = normalize(lightPos-point);
    vec4 aol = vec4(shadowray(ln, point), 1.0);

    out_Color = (aol + vec4(res.y/MAX_ITER,0.0,res.y/MAX_ITER,1.0))/2.0;
  } else {
    out_Color = vec4(0.0);
  }
}
